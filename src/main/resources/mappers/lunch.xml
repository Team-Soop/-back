<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">



<mapper namespace="com.team_soop.soop.repository.LunchMapper">

    <resultMap id="LunchCategoryMap" type="com.team_soop.soop.entity.LunchCategory">
        <result property="lunchCategoryName" column="lunch_category_name"/>
    </resultMap>

    <resultMap id="LunchImgUrlMap" type="com.team_soop.soop.entity.LunchImgUrl">
        <result property="lunchImgUrl" column="lunch_img_url"/>
    </resultMap>

    <resultMap id="lunchResultMap" type="com.team_soop.soop.entity.LunchList">
        <id property="lunchId" column="lunch_id"/>
        <result property="userId" column="user_id"/>
        <result property="lunchTitle" column="lunch_title"/>
        <result property="lunchContent" column="lunch_content"/>
        <result property="lunchPlaceName" column="lunch_place_name"/>
        <result property="lunchPlaceX" column="lunch_place_x"/>
        <result property="lunchPlaceY" column="lunch_place_y"/>
        <result property="lunchPlaceUrl" column="lunch_place_url"/>
        <result property="createDate" column="create_date" />
        <result property="updateDate" column="update_date" />
        <result property="nickName" column="nickname"/>
        <result property="profileImgUrl" column="profile_img_url"/>
        <collection property="lunchImgUrl"  javaType="list" resultMap="LunchImgUrlMap" />
        <collection property="lunchCategoryName" javaType="list" resultMap="LunchCategoryMap"/>
    </resultMap>

    <resultMap id="lunchCommentUserInfoResultMap" type="com.team_soop.soop.entity.LunchComment">
        <id property="lunchCommentId" column="lunch_comment_id"/>
        <result property="lunchId" column="lunch_id"/>
        <result property="lunchCommentUserId" column="lunch_comment_user_id"/>
        <result property="lunchCommentContent" column="lunch_comment_content"/>
        <result property="lunchCommentNickName" column="nickname"/>
        <result property="lunchCommentUserProfileImgUrl" column="profile_img_url" />
        <result property="createDate" column="create_date"/>
        <result property="updateDate" column="update_date"/>
    </resultMap>


    <delete id="deleteComment" parameterType="integer">
        delete
        from
            lunch_comment_tb
        where
            lunch_comment_id = #{commentId}
    </delete>

    <delete id="deleteLunchLike">
        delete
        from
            lunch_like_tb
        where
            lunch_id = #{lunchId} and lunch_like_user_id = #{userId}
    </delete>
    
    <update id="modifyComment" parameterType="com.team_soop.soop.entity.LunchComment">
        update
            lunch_comment_tb
        set
            lunch_comment_content = #{lunchCommentContent},
            update_date = now()
        where
            lunch_comment_id = #{lunchCommentId}
    </update>


    <insert
        id="saveLunch"
        parameterType="com.team_soop.soop.entity.Lunch"
        keyProperty="lunchId"
        useGeneratedKeys="true"
    >
        insert into lunch_tb
        values
        (0, 3, #{userId}, #{lunchTitle}, #{lunchContent}, #{lunchPlaceName}, #{lunchPlaceX}, #{lunchPlaceY}, #{lunchPlaceUrl}, now(), now())
    </insert>

    <insert id="saveLunchImgUrl">
        insert into lunch_img_url_tb
        values
        <foreach collection="lunchImgUrls" item="lunchImgUrl" separator=",">
            ( 0, #{lunchId}, #{lunchImgUrl}, now(), now() )
        </foreach>
    </insert>

    <insert id="saveLunchCategory">
        insert into lunch_category_tb
        values
        <foreach collection="lunchCategories" item="lunchCategory" separator=",">
            ( 0, #{lunchId}, #{lunchCategory}, now(), now() )
        </foreach>
    </insert>

    <insert id="saveLunchComment">
        insert into lunch_comment_tb
        values
        (0, #{lunchId}, #{lunchCommentUserId}, #{lunchCommentContent}, now(), now())
    </insert>

    <insert id="saveLunchLike">
        insert into lunch_like_tb
        values
            (0, #{lunchId}, #{userId}, now())
    </insert>

    <select
        id="myPageSearchLunch"
        resultMap="lunchResultMap"
    >
        select
            lt.lunch_id,
            lt.user_id,
            lt.lunch_title,
            lt.lunch_content,
            lt.lunch_place_name,
            lt.lunch_place_x,
            lt.lunch_place_y,
            lt.lunch_place_url,
            lt.create_date,
            lt.update_date,

            ut.nickname,
            ut.profile_img_url,

            liut.lunch_img_url,
            lctt.lunch_category_name
        from
            lunch_tb lt
            left outer join lunch_img_url_tb liut on ( liut.lunch_id = lt.lunch_id )
            left outer join lunch_category_tb lctt on ( lctt.lunch_id = lt.lunch_id )
            left outer join user_tb ut on ( ut.user_id = lt.user_id )
        where
            lt.user_id = #{userId}
    </select>

    <select
        id="searchLunchList"
        resultMap="lunchResultMap"
    >
        select
            lt.lunch_id,
            lt.user_id,
            lt.lunch_title,
            lt.lunch_content,
            lt.lunch_place_name,
            lt.lunch_place_x,
            lt.lunch_place_y,
            lt.lunch_place_url,
            lt.create_date,
            lt.update_date,

            ut.nickname,
            ut.profile_img_url,

            liut.lunch_img_url,
            lctt.lunch_category_name
        from
            lunch_tb lt
            left outer join lunch_img_url_tb liut on ( liut.lunch_id = lt.lunch_id )
            left outer join lunch_category_tb lctt on ( lctt.lunch_id = lt.lunch_id )
            left outer join user_tb ut on ( ut.user_id = lt.user_id )
    </select>

    <select
        id="searchLunchComment"
        resultMap="lunchCommentUserInfoResultMap"
    >
        select
            lct.lunch_comment_id,
            lct.lunch_id,
            lct.lunch_comment_user_id,
            lct.lunch_comment_content,

            ut.nickname,
            ut.profile_img_url,

            lct.create_date,
            lct.update_date
        from
            lunch_tb lt
            left outer join lunch_comment_tb lct on ( lct.lunch_id = lt.lunch_id )
            left outer join user_tb ut on ( ut.user_id = lct.lunch_comment_user_id )
        where
            lct.lunch_id = #{detailLunchId}
    </select>

    <select id="getLikeLunchStatus" resultType="com.team_soop.soop.entity.LikeStatus">
        select
            count(*) as likeStatus,
            (select
                count(*) as total_count
            from
                lunch_like_tb
            where
                lunch_id = #{lunchId}
            ) as totalCount
        from
            lunch_like_tb
        where
            lunch_like_user_id = #{userId}
        and lunch_id = #{lunchId}
    </select>















</mapper>

